Xinnan Xie
11215372
xix227

This app will allow user to create a chat room that allow user to making group chat or private chat with other user.
User will be able to see all the message that user receive. Once user login or create an account. User will jump to
chatroom. The Current active user will be shown on the left panel and user can send them private chat once enter their
name on the invite section. It will create an empty chatroom between these users. this message will be only shown
between you and the target user. Once you close the tag or logout and login again, all the private chat will still
in your chatroom page and you can view it anytime. However, you cannot send a message to the user whose are currently
offline. Normally, you cannot add a person is not online, but once you add another person into your chat list, it will
stay in your chatlist. Although you can still send message to someone is offline, but you will have a negative reply
"this user is currently offline".

How to user this app:
This application request sbt to compile the application. For this reason, you need to have JDK 1.8 and sbt installed.
Then, you need to go to the PlayChat file in the terminal or using intellij to "import Play-Chat project". After that,
you run "sbt run" in you terminal or using intellij by the sbt shell . After the compile and running, you go to
http://localhost:9000/login to create an account or login. After you login, you will jump to http://localhost:9000/chat
page which you can chat with other users.

This application was build in Play Framework which was built on Akka and provides fully asynchronous model. Second,
play frame provide a good error report system. It will display the error message and error location on the webpage.
On the other hand, play frame work using logical HTTP representation (GET， POST，etc), make some calls of its own and
returns the result back to the browser.

This project was follow the forward flow control pattern which mean client will send the request to a route, route send
the request file server Then server send it to the client directly. Such that the request flow toward their destination
vai the shortest paht and response also not waste on their way back. Because the servers comminicate directly with the
clients. In this case, once user login, it will create an actor as client and send the message to the envelop actor.
The Envelope Actor was build by manager queue and circuit breaker pattern. It will store the request as work and send it
to the server. Once the work queue above the limit, it will stop receiving message and tell client that we are full
instead of wasting their time. For the work, I have a manager actor and the worker actor. manager will take the work
request from the envelope and send the work to the workers. worker will finish the work and send it back to the client
and tell manager when their finish the job. Once the user receive the message, the actor will send the message to the
web socket which will using the message to display the information.
